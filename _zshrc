# users generic .zshrc file for zsh(1)

## Environment variable configuration
#
export LANG=ja_JP.UTF-8
export LESSCHARSET=utf-8
export OUTPUT_CHARSET=utf-8
export LC_CTYPE=ja_JP.UTF-8


## Alias configuration
#
# expand aliases before completing
#
setopt complete_aliases   # aliased ls needs if file/dir completions work


## Backspace key
#
bindkey "^?" backward-delete-char


## Prompt configuration
#
autoload -U colors; colors  # use colors

#
# Color
#
DEFAULT=$'%{\e[1;0m%}'
RESET="%{${reset_color}%}"
GREEN="%{${fg[green]}%}"
BLUE="%{${fg[blue]}%}"
RED="%{${fg[red]}%}"
CYAN="%{${fg[cyan]}%}"
YELLOW="%{${fg[yellow]}%}"
WHITE="%{${fg[white]}%}"
GRAY="%{${fg[GRAY]}%}"

RPROMPT="%T"
setopt transient_rprompt
precmd () {
    PROMPT="${GREEN}%n${RESET}@${BLUE}%m${YELLOW} %~${RESET}" 
    st=`git status 2>/dev/null`
    if [[ -n `echo "$st" | grep "^nothing to"` ]]
    then
        color=${fg[cyan]}
    elif [[ -n `echo "$st" | grep "^nothing added"` ]]
    then
        color=${fg[blue]}
    elif [[ -n `echo "$st" | grep "^# Untracked"` ]]
    then
        color=${fg_bold[red]}
    else
        color=${fg[red]}
    fi
    PROMPT+="
%{$color%}$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1 /')%b${RESET}"
}

# ビープを鳴らさない
setopt nobeep

# エスケープシーケンスを使う
setopt prompt_subst

# コマンドラインでも#以降をコメントと見なす
setopt interactive_comments

# C-s, C-qを無効にする
setopt no_flow_control

# 日本語のファイル名を表示可能
setopt print_eight_bit

# C-wで直前の/までを削除する
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# ディレクトリを水色にする
export LS_COLORS='di=01;36'

#----------------------------------------------------------
# 補完関連
#----------------------------------------------------------
# 補完機能を強化
autoload -Uz compinit
compinit

# URLを自動エスケープ
autoload -Uz url-quote-magic; zle -N self-insert url-quote-magic

# TABで順に補完候補を切り替える
setopt auto_menu

# 補完候補を一覧表示
setopt auto_list

# 補完候補をEmacsのキーバインドで動けるように
zstyle ':completion:*:default' menu select=1

# --prefix=/usrなどの=以降も補間
setopt magic_equal_subst

# ディレクトリ名の補間で末尾の/を自動的に付加し、次の補間に備える
setopt auto_param_slash

## 補完候補の色付け
#eval `dircolors`
export ZLS_COLORS=$LS_COLORS
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# 補完候補を詰めて表示
setopt list_packed

# 補完候補一覧でファイルの種別をマーク表示
setopt list_types

# 最後のスラッシュを自動的に削除しない
setopt noautoremoveslash

# スペルチェック
setopt correct

# killコマンドでプロセスを補完
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([%0-9]#)*=0=01;31'

zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin/bin

#----------------------------------------------------------
# 移動関連
#----------------------------------------------------------
# ディレクトリ名でもcd
setopt auto_cd
# cdのタイミングで自動的にpushd.直前と同じ場合は無視
setopt auto_pushd
setopt pushd_ignore_dups

#----------------------------------------------------------
# 履歴関連
#----------------------------------------------------------
# 履歴の保存先
HISTFILE=$HOME/.zsh-history
# メモリに展開する履歴の数
HISTSIZE=10000
# 保存する履歴の数
SAVEHIST=10000
# ヒストリ全体でのコマンドの重複を禁止する
setopt hist_ignore_dups
# コマンドの空白をけずる
setopt hist_reduce_blanks
# historyコマンドはログに記述しない
setopt hist_no_store
# 先頭が空白だった場合はログに残さない
setopt hist_ignore_space
# 履歴ファイルに時刻を記録
setopt extended_history
# シェルのプロセスごとに履歴を共有
setopt share_history
# 複数のzshを同時に使うときなどhistoryファイルに上書きせず追加
setopt append_history
# 履歴をインクリメンタルに追加
setopt inc_append_history
# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify
# 履歴検索機能のショートカット設定
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
# インクリメンタルサーチの設定
bindkey "^R" history-incremental-search-backward
bindkey "^S" history-incremental-search-forward
# 全履歴の一覧を出力する
history-all () {
    history -E 1
}


#----------------------------------------------------------
# その他
#----------------------------------------------------------
# ログアウト時にバックグラウンドジョブをkillしない
setopt no_hup
# ログアウト時にバックグラウンドジョブを確認しない
setopt no_checkjobs
# バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt notify

# makeのエラー出力に色付け
e_normal=`echo -e "\033[0;30m"`
e_RED=`echo -e "\033[1;31m"`
e_BLUE=`echo -e "\033[1;36m"`
make () {
    LANG=C command make "$@" 2>&1 | sed -e "s@[Ee]rror:.*@$e_RED&$e_normal@g" -e "s@cannot\sfind.*@$e_RED&$e_normal@g" -e "s@[Ww]arning:.*@$e_BLUE&$e_normal@g"
}

export DOTFILES="${HOME}/code/dotfiles"

# source-highlight による less の色付け
if [ -x "${HOME}/.source-highlight/src-hilite-lesspipe.sh" ]; then
    export LESS='-R'
    export LESSOPEN="| $HOME/.source-highlight/src-hilite-lesspipe.sh %s"
fi

[ -d /usr/local/bin ] && export PATH=/usr/local/bin:$PATH

export GREP_OPTIONS='--color=auto'


## Python
#
[[ -s "${HOME}/.pythonrc.py" ]] && export PYTHONSTARTUP=$HOME/.pythonrc.py
[[ -s "${HOME}/.pythonbrew/etc/bashrc" ]] && source $HOME/.pythonbrew/etc/bashrc
export NOSE_REDNOSE=1
export PYTHONPATH=$HOME/.pythonpath:$PYTHONPATH

## Ruby
#
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && source $HOME/.rvm/scripts/rvm

## Node
#
[[ -s "${HOME}/.nvm/nvm.sh" ]] && source $HOME/.nvm/nvm.sh

## CoffeeScript
#
_cake () {
	if [ -f Cakefile ]; then
        compadd `cake | grep '^cake ' | sed -e "s/cake \([^ ]*\) .*/\1/" | grep -v '^$'`
	fi
}

compdef _cake cake

## Perl
#
PERL_BADLANG=0; export PERL_BADLANG

## Java
#
export LC_ALL=en

## Git
#
[[ -s "$HOME/.gitignore" ]] && git config --global core.excludesfile $HOME/.gitignore



## alias
#
[ -f ~/.zshrc.alias ] && source ~/.zshrc.alias

## os depending settings
#
case ${OSTYPE} in
darwin*) # Mac OS X
    [ -f ~/.zshrc.osx ] && source ~/.zshrc.osx
    export PATH=$PATH:/opt/local/bin:/opt/local/sbin/
    export PATH=$PATH:/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/
    ;;
linux*)
    [ -f ~/.zshrc.linux ] && source ~/.zshrc.linux
    ;;
esac

## local settings
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
